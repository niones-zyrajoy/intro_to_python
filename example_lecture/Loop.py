"""
#SAMPLE
fruits = ['Cherry', 'Apple', 'Orange']
print(fruits)
fruits[1] = 'Durian'
print(fruits)"

#SAMPLE
fruits = ['Cherry', 'Apple', 'Orange']
print(fruits[3]) # DOESN'T RUN BECUSE I DOESN'T EXIST
print(fruits[-4])
fruits[3] = 'Papaya'
fruits[-4] = 'Guava'

#ACTIVITY
favorite_things = ['Pencil', 'Brush', 'paper', 'kwek','laptop']
inputted_number= int(input("Enter a number:"))
print(inputted_number"{favorite_things}")


#format 1
fruits = ["Strawberries", "Spinach", "Kale"],
vegetables =["Tomatoes", "Celery", "Potatoes"]
food = [fruits, vegetables]
print(food)

#format 2
foods =
       ["Strawberries",
        "Spinach", 
        "Kale"],

       ["Tomatoes", 
       "Celery", 
       "Potatoes"]
food = [fruits, vegetables]
print(food)

#loop
fruits = ['Cherry', 'Apple', 'Orange']
for fruit in fruits:
 print(fruit)


#RangeRange is useful with loop to iterate a range of numbers
for number in range(10):
 print(number)

#Range above will print 0 to 9 because the first number
#will start with 0 and ends with the number inside
#parenthesis minus 1.
for number in range(5, 10):
 print(number)

#By default, each number generated by range is always
#added by one. This is called a step and by default set to 1
for number in range(5, 10, 2):
 print(number)"

#While Loop
while True:
 print("Hello World!")

message = "Starting loop"
while message != "exit":
 print(message)
 message = input("Enter your message: ")

print("Loop Ended")

#BREAK
for number in range(1, 11):
 if number == 7: # when it encounters 7 it will only print 1,2,3,4,5,6
   break
 print(number)

#CONTINUE
for number in range(1, 11):
 if number == 7: # it did not print the 7 it will only print 1,2,3,4,5,6,8,9,10
   continue
 print(number)

#example 1
matrix = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9],
]
print(matrix [1][0])
#-----------------------------------------------------------
#                   FUNCTION
def greet(): #greet is the function name
    print("Hello World!")
    # it will not print
greet() # function call

#GLOBAL 
message = "Hello World!" #GLOBAL/ OUTSIDE THE CODE
def greet():
 message = "Hi There!"   #LOCAL/ OUTSIDE THE CODE , BALI ITO MAUUNA
 print(message)
greet()
print(message)

def greet(): #always define the variable
 global message
 message = "Hello World!"

greet()
print(message)


#The global keyword can be use to update a global variable inside a function
#cannot update the global variable

message = "Hello World!" #existing variable global
def greet():
 global message # accesed the message above because it is one variable
 message = "Hi There!" #local
 print(message)
greet()
print(message)

def greet(msg): #formal parameter
 print(f"Greetings: {msg}")
greet("Hello World!") #Actual value/ parameter argument 

#Function with Multiple Input
def greet(message, sender, receiver):
 print(f"To: {receiver}!") #3rd parameter
 print(f"Message: {message}") #1st parameter
 print(f"From: {sender}") #2nd parameter
greet("Welcome to the team!", "Steven", "John")

#Function with Output
def celsius_to_fahrenheit(celsius):
  farenheit = (celsius * 9/5) + 32
  return farenheit
celsius = celsius_to_fahrenheit(36)
print(celsius)

#guard clause
def get_sum_of_digits(value):
 if not value.isdigit():
   print("Not a number.")
   return 0 #mas neat na format kaysa sa elif
 tens_digit = int(value[0])
 ones_digit = int(value[1])
 return tens_digit + ones_digit
user_input = input("Enter a 2 digit number: ") #checking 
print(get_sum_of_digits(user_input))"
"""
def sum_of_items(numbers):
    return (numbers [0] +
            numbers [1] +
            numbers [2] +
            numbers [3] +
            numbers [4] 
            )

numbers = []
for user_input in range (value):
    numbers.append ("int")
print(sum_of_items(numbers))